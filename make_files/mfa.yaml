---
domain: mfa.cape.io # This is the comple server CNAME.
uid: 1 # The CAPE user ID to use for authenticating against the providers when requesting API resources. This needs to be updated to the correct uid.
cape_version: 2.2.2 # Current version of cape can be found at http://v2.cape.io/version

load:
  - "/_api/gh_repo/_load.json"
  - "/_api/student/_load.json"
  - "/_api/student_gallery/_load.json"
  - "/_api/photos/_load.json"

api: # An API as a collection of content.

  gh_repo: # Used to get content from the big heavy github repo.
    provider: github
    arg:
      owner: bjornmeansbear
      repo: mfathesis2014
      branch: master
    field:
      _self:
        overwrite_file: true
        html_as_file: true
    load:
      cache: true

  student: # Get item content from a json file.
    provider: gsheet
    arg:
      id: 0Al-kEdVYvxtGdG1wOEFNUUNEWW1CaDBlbXBHYlhQN0E
    load:
      resource: rows
      _id: id
    filter:
      must_not:
        disable: x
    without: [_links, content, title, disable, _d415a]
    field:
      statement:
        app: map
        func: markdown
        arg: websitelongstatementupto500words

  student_gallery: # Get item content from a json file.
    provider: gsheet
    arg:
      id: 0AvPe_NdeKbxjdFFWU0lpSmJYV3NUSlIzcGU1cWRWTnc
    load:
      resource: rows
      _id: studentid
    without: [_links, content, id, title]
    filter:
      must_not:
        studentid:
          - "443278"
          - "440087"
          - "464187"
          - "448744"
          - "453220"
          - "401805"
          - "415768"
          - "420845"
          - "361711"
          - "542280"
          - "542281"
          - "463878"
          - "454217"
          - "499514"
          - "475068"
          - "515940"
          - "524679"
          - "530304"
          - "535795"
          - "536518"
          - "538221"
          - "540707"

  photos:
    provider: dropbox
    ext_types:
      '.txt': 'yaml'
    insert_only: false
    load:
      arg:
        path_prefix: /GradShow2014GPAs
    filter:
      must_not:
        ext: ['.doc', '.rtf', '.docx', '.tiff', '.mp4', '.tif', '.pages']
    field:
      _self:
        no_files: true
        overwrite_file: false
        yaml_to_file: false
      dir_i: true
      filename: true
      studentid:
        func: substring
        arg:
          string: dir3
          substring: -6
      sort:
        func: substring
        arg:
          string: filename
          trim: true
          rm_ext: true
          substring: -2
          allow_empty: false
    fields:
      -
        filter:
          should:
            mime_type: ["image/jpeg", "image/png"]
        field:
          file_type: 'image'
      -
        filter:
          should:
            ext: ['.txt', '.yml', '.yaml']
        field:
          file_type: 'info'
    rename:
      dir2: program
    without: [dir1, dir3, dirsplit]

model:

  students:
    api: student
    pluck: [statement, program, firstname, lastname, urlofpersonalwebsite, studentid, personalemail, exhibitionlocation]
    eqJoin:
      table: student_gallery
      key: id
      zip: true

  student_gallery: # Get item content from a json file.
    api: student_gallery
    pluck: [studentid, exhibitionlocation]

  # photo_groups:
  #   filter:
  #     api: photos
  #     must:
  #       is_dir: true
  #   field:
  #     _self:
  #       api: dropbox
  #       resource: meta
  #       arg:
  #         root: dropbox
  #         path: '{{&path}}'

  slideshow:
    api: photos
    should:
      mime_type: ["image/jpeg", "image/png"]
    group_by: studentid
    pluck: [sort, ext]
    sort: sort
    merge: true
    map:
      add: [sort, ext]
    #count: true
    # file:
    #   source_file:
    #     api: photos
    #     resource: files
    #     file_id: '/img/originals/{{studentid}}/{{sort}}{{_ext}}'
    #     type: any
    #     arg:
    #       root: dropbox
    #       path: "{{path}}"
    #     img_size:
    #       delete_source: true
    #       sizes:
    #         -
    #           destination: '/img/slides/{{studentid}}/{{sort}}{{_ext}}'
    #           width: '850'
    #           height: null

  photo_info:
    api: photos
    must:
      file_type: info
    pluck: content
    index_by: studentid
    merge: true

view:
  # gallery:
  #   type: list
  #   field:
  #     _data:
  #       model: gallery
  #       pluck: [gallery, building, address, show]

  # show:
  #   type: list
  #   field:
  #     _data:
  #       model: show
  #       pluck: [program, showopeningpartytime, showopeningpartydate, startdate, enddate]

  # photo_info:
  #   field:
  #     _data:
  #       model: photo_info
  #       index_by: studentid
  #       pluck: text
  #       values: true
  #   output_id: items/photo_info.json

  # photo_list:
  #   field:
  #     photos: true
  #   pager:
  #     iterate: photos
  #     field_id: item
  #   emit:
  #     source: '/img/originals/{{item.studentid}}/{{item.sort}}{{item._ext}}'
  #     destination: '/img/slides/{{item.studentid}}/{{item.sort}}{{item._ext}}'
  #     width: '850'
  #     height: null

  # photos:
  #   field:
  #     _data:
  #       model: photos

  #       emit: '/img/slides/{{studentid}}/{{sort}}{{_ext}}'

  client_data:
    output_id: items/data.json
    field:
      students:
        return_all: true
      slideshow: true
      photo_info: true
