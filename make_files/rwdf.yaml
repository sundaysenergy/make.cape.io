---
domain: www.rwdfoundation.org # This is not used for anything yet.
cdn: www.rwdfoundation.org
uid: kc2 # The CAPE user ID to use for authenticating against the providers when requesting API resources.
cape_version: 2.1.7

api: # An API is just a set of default information.
  cloudfiles: # Used for uploads to the CDN used for the website.
    provider: cloudfiles
    arg:
      container: www.rwdfoundation.org

  gh_theme: # Used to get theme from github.
    provider: github
    arg:
      repo: rwdf-site-theme
      owner: bjornmeansbear
      branch: master
    load: # To load previously created content from this API you need to specificy the load param.
      resource: tree # Github has a nice index of all content in a repo.
      _id: path
      arg:
        recursive: true
        sha: master

  content:
    provider: dropbox
    arg:
      root: dropbox
      path_prefix: /rwdf-site-content
    load:
      resource: delta
      _id: path
      arg:
        cursor: ''

model:
  files:
    type: files
    filter:
      api: content
      should:
        _ext: ['.jpg', '.jpeg', '.png', '.css', '.js', '.ico', '.gif', '.html', '.ttf', '.pdf']
    file:
      source_file:
        api: content
        resource: files
        file_id: '{{&_id}}'
        type: any
        arg:
          root: dropbox
          path: '{{path}}'

  files2:
    type: files
    filter:
      api: gh_theme
      should:
        _ext: ['.jpg', '.jpeg', '.png', '.css', '.js', '.ico', '.gif', '.html', '.ttf', '.pdf']
    file:
      source_file:
        api: gh_theme
        resource: raw
        file_id: '{{&_id}}'
        type: any
        arg:
          path: '{{&path}}'

  data:
    type: set
    set_key: _no_ext
    filter:
      api: content
      must:
        _filename: data
      should:
        _ext: ['.yaml', '.yml']
    field:
      _self: # _self is a special meta-field that will place its own fields within the base context.
        file_id: '{{_no_ext}}.json' # When the _file field has a value it saves that field as a file.
        api: content # The _self field is processed first.
        resource: files # This just defines what API at github to use.
        type: yaml # This tells CAPE what to do with the file that it gets. This should default to the file extension.
        arg:
          root: dropbox
          path: '{{path}}'

  pages:
    type: object
    filter:
      api: content
      must:
        _id: pages.yaml
    field:
      _self: # _self is a special meta-field that will place its own fields within the base context.
        file_id: '{{_no_ext}}.json' # When the _file field has a value it saves that field as a file.
        api: content # The _self field is processed first.
        resource: files # This just defines what API at github to use.
        type: yaml # This tells CAPE what to do with the file that it gets. This should default to the file extension.
        arg:
          root: dropbox
          path: '{{path}}'

  page_info:
    type: set
    set_key: _dirname
    filter:
      api: content
      should:
        _ext: ['.yaml', '.yml']
      must:
        _filename: page_info
    field:
      _self: # _self is a special meta-field that will place its own fields within the base context.
        file_id: '{{_no_ext}}.json' # When the _file field has a value it saves that field as a file.
        api: content # The _self field is processed first.
        resource: files # This just defines what API at github to use.
        type: yaml # This tells CAPE what to do with the file that it gets. This should default to the file extension.
        arg:
          root: dropbox
          path: '{{path}}'

  content:
    type: ezle
    filter:
      api: content
      must:
        _ext: .md
    field: # The base "entity" in CAPE is the _id field. That's it.
      # To get the contents of the file we need to add a "meta-field"
      _self: # _self is a special meta-field that will place its own fields within the base context.
        api: content # The _self field is processed first.
        resource: files # This just defines what API at github to use.
        type: md # This tells CAPE what to do with the file that it gets. This should default to the file extension.
        arg:
          root: dropbox
          path: '{{path}}'

  template:
    filter:
      api: gh_theme
      must:
        _dirname: templates
    field:
      _self:
        api: gh_theme
        resource: raw
        type: yaml_front
        default: default.html
        arg:
          path: '{{&_id}}'

  news:
    filter:
      api: content
      must:
        _dir2: articles
        _ext: .md
    field:
      date:
        app: map
        func: date_from_string
        arg:
          string: '{{_file_slug}}'
          start: 0
          end: 10
          display: 'MMM DD, YYYY'

view:
  content:
    type: set
    field:
      content:
        model: content

  index:
    type: string
    field:
      content: true
      data: true
      page_info: true
      front:
        api_id: content
        index_type: list
        index_id: homepage
        index_by: _i
    file_id: index.html
    template:
      model: template
      _id: default.html
      partial:
        page_html:
          model: template
          _id: homepage.html

  pages:
    type: string
    field:
      content: true
      data: true
      page_info: true
      jumbotron: 1
      pages:
        model: data
        emit: data.pages
    pager:
      iterate: pages
      field_id: page
      ezle: true
      template:
        partial:
          page_html:
            model: template
            _id: "{{page._id}}.html"
      file_id: "{{page._id}}/index.html"
    template:
      model: template
      _id: default.html

  projects:
    type: string
    field:
      data: true
      projects:
        model: content
        emit: whatwedo.projects._all
      spruceups:
        model: content
        emit: whatwedo.projects.spruceups._all
    pager:
      iterate: projects
      field_id: page
      file_id: "whatwedo/{{page._filename}}/index.html"
      bool_field_id: _filename
    template:
      model: template
      _id: default.html
      partial:
        page_html:
          model: template
          _id: project.html

  client_data:
    type: list
    field:
      projects:
        model: content
        emit: whatwedo.projects._all
        pluck: [image, featureimg, featuretitle, title, featureblurb, _filename, _id, date, summary]
    output_id: whatwedo/projects.json

display: # The fun part. A Display defines what to do with the data.

  feature: # Create a display that contains only published entities.
    style: object # Single result.
    limit: 1 # Only want one result.
    offset: 0 # No offset. Get the first one.

  other:
    style: object # Single entity.
    limit: 1 # Only want one entity.
    offset: 1 # Skip 1 entity.

  triptych:
    style: list # An array of entities.
    limit: 3 # Limit to three.
    offset: 2 # Skip the first 2 in the results from the view.

  _index: # Time to put it all together.
    field: # Define what is available to the template.
      feature: true # True says that the field is the name of a display in this view.
      other: true # The display in this view called other.
      triptych: true # The display called triptych in this view.
      homepage: # (dek, hed, legacy, tellus)
        view: homepage # Get all the entities from the homepage view.
    style: page # Save this as a page.
    type: html # The page has the html format.
    template: # We want to pass the fields of this display to a template.
      api: content # Where to get the template from?
      resource: raw # Use the github raw to load a file.
      arg: # What args to pass the API
        path: _cape/homepage.mustache # Define the file path.
      convert: mustache # What conversion process do we use.
    destination: # What do we do with the generated file?
      api: cloudfiles # Send it off somewhere using the API definition above.
      resource: upload # Upload the file.
      arg: # Override the API arg values above with those below.
        file: /_index.html # Tells the API what filename to give this file.

  admin:
    style: page
    type: html
    template:
      api: content
      resource: raw
      arg:
        path: _cape/projects.mustache
      convert: mustache
    destination:
      api: cloudfiles
      resource: upload
      arg:
        file: /frontpage/admin.html
