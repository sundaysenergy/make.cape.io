---
domain: www.rwdfoundation.org # This is not used for anything yet.
cdn: www.rwdfoundation.org
uid: kc2 # The CAPE user ID to use for authenticating against the providers when requesting API resources.
cape_version: 2.1.11

api: # An API is just a set of default information.
  cloudfiles: # Used for uploads to the CDN used for the website.
    provider: cloudfiles
    arg:
      container: www.rwdfoundation.org

  gh_theme: # Used to get theme from github.
    provider: github
    arg:
      repo: rwdf-site-theme
      owner: bjornmeansbear
      branch: master
    load: # To load previously created content from this API you need to specificy the load param.
      resource: tree # Github has a nice index of all content in a repo.
      _id: path
      arg:
        recursive: true
        sha: master

  content:
    provider: dropbox
    arg:
      root: dropbox
      path_prefix: /rwdf-site-content
    load:
      resource: delta
      _id: path
      arg:
        cursor: ''

model:
  files:
    type: files
    filter:
      api: content
      should:
        _ext: ['.jpg', '.jpeg', '.png', '.css', '.js', '.ico', '.gif', '.html', '.ttf', '.pdf']

  files2:
    type: files
    filter:
      api: gh_theme
      should:
        _ext: ['.jpg', '.jpeg', '.png', '.css', '.js', '.ico', '.gif', '.html', '.ttf', '.pdf']
    file:
      source_file:
        api: gh_theme
        resource: raw
        file_id: '{{&_id}}'
        type: any
        arg:
          path: '{{&_id}}'

  content:
    type: list
    filter:
      api: content
      must:
        _ext: '.md'
    field:
      teaser:
        app: map
        func: prune
        arg:
          string: '{{&content}}'
          stripTags: true
          length: 110

  # EVERYTHING!
  everything:
    type: ezle
    filter:
      api: content
      must_not:
        _ext: false
        _dir1: '.git'
    field:
      _self: true # MAGIC!

  template:
    filter:
      api: gh_theme
      must:
        _dirname: templates
    field:
      _self:
        api: gh_theme
        resource: raw
        type: yaml_front
        default: default.html
        arg:
          path: '{{&_id}}'

  news:
    filter:
      api: content
      must:
        _dir2: articles
        _ext: .md
    field:
      date:
        app: map
        func: date_from_string
        arg:
          string: '{{_file_slug}}'
          start: 0
          end: 10
          display: 'MMM DD, YYYY'

view:
  content:
    type: set
    field:
      content:
        model: content

  everything:
    type: set
    field:
      content:
        model: everything

  index:
    type: string
    field:
      content:
        model: everything
      data:
        model: everything
        emit: data_yaml
      front:
        view: client_data
        emit: projects
        field: output

    file_id: index.html
    template:
      model: template
      _id: default.html
      partial:
        page_html:
          model: template
          _id: homepage.html

  pages:
    type: string
    field:
      content:
        model: everything
      data:
        model: everything
        emit: data_yaml
      pages:
        model: everything
        emit: data_yaml.pages
    pager:
      iterate: pages
      field_id: page
      ezle: true
      template:
        partial:
          page_html:
            model: template
            _id: "{{page._id}}.html"
      file_id: "{{page._id}}/index.html"
    template:
      model: template
      _id: default.html

  projects:
    type: string
    field:
      data:
        model: everything
        emit: data_yaml
      projects:
        model: everything
        emit: whatwedo.projects._dirs
      spruceups:
        model: everything
        emit: whatwedo.projects.spruceups._all
    pager:
      iterate: projects
      field_id: page
      file_id: "{{page._dirname}}/index.html"
      bool_field_id: _dir3
    template:
      model: template
      _id: default.html
      partial:
        page_html:
          model: template
          _id: project.html

  client_data:
    type: list
    field:
      all_projects:
        model: everything
        emit: whatwedo.projects._dirs
        pluck: [_image, featureimg, featuretitle, title, featureblurb, _dirname, _dir_id, _id, date, summary, teaser, _images]
        index_by: _id
        map: feature_img
      featured_projects:
        api_id: content
        index_type: list
        index_id: homepage
        field: entities
        index_by: id
    merge:
      field_id: projects
      sort: score
    output_id: whatwedo/projects.json

