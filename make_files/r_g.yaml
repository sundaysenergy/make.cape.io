---
domain: r-g.cape.io # This is the cache CNAME used for the virtual server on the compile server. CNAME that domain to cache.cape.io and it will serve the compiled website.
cdn: img.rg.ookb.co
uid: kb # The CAPE user ID to use for authenticating against the providers when requesting API resources. This needs to be updated to the correct uid.
cape_version: 2.2.2 # Current version of cape can be found in Kai's head. Future at v2.cape.io/version

load:
  - "/_api/items/_load.json"
  - "/_api/gh_repo/_load.json"
  - "/_api/cdn/_load.json"
  - "/_dropbox/_poll/photos"
  # - "/_model/items/model_fields_add.json"
  # - "/_model/files/model_fields_reload.json"
  # - "/_model/template/model_fields_reload.json"
  # - "/_model/pages/model_fields_reload.json"
  - "/_view/_all/_output"

api: # An API as a collection of content.
  cdn:
    provider: cloudfiles
    arg:
      container: img.rg.ookb.co

  photos:
    provider: dropbox
    arg:
      root: sandbox
      path_prefix: /rg
    field:
      dir_i: true
      _self:
        overwrite_file: false
    fields:
      - # Passementrie
        filter:
          must:
            mime_type: "image/jpeg"
            dir1: Passementrie
        field:
          collection: passementerie
          itemNumber:
            arg_field: filename
          _file:
            source_file:
              path: 'items/{{filename}}/original.jpg'
            wide:
              path: 'items/{{filename}}/1170.jpg'
            xlarge:
              path: 'items/{{filename}}/2560.jpg'
      - # Leather
        filter:
          must:
            mime_type: "image/jpeg"
            dir1: leather
        field:
          collection: leather
          itemNumber:
            func: string_replace
            arg:
              string: path
              regex: '.*[\_]([^_]*[-][^_]*)[\_].*'
              replace: '$1'
      - # Textiles
        filter:
          must:
            mime_type: 'image/jpeg'
          should:
            dir1: [normal, far]
        field:
          collection: textile
          itemNumber:
            app: map
            func: string_replace
            arg:
              string: path
              regex: '.*[\_]([^_]*[-][^_]*)[\_].*'
              replace: '$1'
          distance:
            arg_field: dir1

      - # Items
        filter:
          must:
            mime_type: 'image/jpeg'
          should:
            dir1: [normal, far, leather]
        field:
          _file:
            source_file:
              path: 'items/{{itemNumber}}/original.jpg'
            small:
              path: 'items/{{itemNumber}}/640.jpg'
            large:
              path: 'items/{{itemNumber}}/1536.jpg'
            xlarge:
              path: 'items/{{itemNumber}}/2560.jpg'
    img_size:
      sizes:
        small:
          width: 640
        wide:
          width: 1170
        large:
          width: 1536
        xlarge:
          width: 2560


  gh_repo: # Used to get content from the big heavy github repo.
    load:
      cache: true
    provider: github
    arg:
      owner: bjornmeansbear
      repo: rogers-and-goffigon
      branch: master
    field:
      dir_i: true
      _self:
        resource: raw_api
    filter:
      must_not:
        dir1: reference

  theme:
    provider: github
    arg:
      owner: sundaysenergy
      repo: rg.theme
      branch: master

  theme_bootstrap:
    provider: github
    arg:
      owner: twbs
      repo: bootstrap
      branch: master
    load:
      arg:
        sha: a365d8689c3f3cee7f1acf86b61270ecca8e106d

  db: # Accept any post with make_id r_g...
    provider: post
    arg:
      make_id: r_g
    load: false

  # An API defined for accepting posts.
  items: # Get item content from a json file.
    provider: order-track
    arg:
      uid: 5
    load:
      resource: items
      _id: itemNumber
      #cache: true
    filter:
      must_not:
        itemNumber: 'TRIMBOOK'
    without: [alternatePrice, inventory, comments, finish, freightCode, itemComments, miscellaneous, purchaseOrders, webComments, manufacturer, char1, char1int, serialNumber, sampleType]
    clean: true
    field:
      color_id:
        func: last_dash
        arg: itemNumber
      content_arr:
        func: split
        arg:
          string: content
          split_on: ', '
          split_on_sub: ' '
          compact: true
      colors:
        func: split
        arg:
          string: '{{&primaryColor}}, {{&secondaryColor}}'
          split_on: ', '
          unique: true
          compact: true
      design_descriptions:
        func: split
        arg:
          string: design
          split_on: ', '
          unique: true
          compact: true
      use:
        func: string_replace
        arg:
          string: miscellaneous
          split_on: ','
          toUpperCase: true
          trim: true
          find_replace:
            A: Accessories
            D: Draperies
            U: Upholstery
            WC: Wall Covering
            SC: Slip Covers
            S: Sheer
      color:
        func: second
        arg: descriptions
      name:
        func: first
        arg: descriptions
      char1:
        arg: itemNumber
      char1int:
        arg: itemNumber
    fields:
      -
        filter:
          must:
            char1int: true
        field:
          collection: textile
          approx_width:
            app: map
            func: string_replace
            arg:
              string: '{{&width}}'
              regex: ' ?APP?R?R?O?X\.? ?'
              toUpperCase: true
              trim: true
              replace: ''
      -
        filter:
          must:
            char1: P
        field:
          collection: passementerie
      -
        filter:
          must:
            char1: L
        field:
          collection: leather
model:

  template:
    api: gh_repo
    must:
      dirname: templates

  photos_passementerie:
    api: photos

  photos_leather:
    api: photos

  photos_textiles:
    api: photos

  data:
    api: gh_repo
    get: content/data.yaml

  showrooms:
    api: gh_repo
    get: content/contact/showrooms.yaml

  beautyshots:
    api: gh_repo
    get: beautyshots/index.yaml

  pages:
    api: gh_repo
    must:
      dir1: content
      _ext: .md

  price:
    api: items
    pluck: price
    index_by: itemNumber
    merge: true

  mini_templates:
    api: gh_repo
    must:
      dirname: templates/mini
    field:
      filename: true
    index_by: filename
    pluck: content
    merge: true

  colors:
    api: items
    group_by: patternNumber
    pluck: color_id
    merge: true

  color_ops:
    api: items
    group_by: collection
    flatten: colors
    unique: true
    merge: true

  design_descriptions:
    api: items
    must:
      collection: textile
    flatten: design_descriptions
    unique: true
    without:
      - CHI
      - DAMASK
      - FLAM
      - FLOR
      - 'FLOWER,'
      - JACQUAR
      - 'JACQUARD,'
      - SATI
      - SO
      - STRIE
      - TATTERSAL
      - WEAVE

  design_descriptions_passementerie:
    api: items
    must:
      collection: passementerie
    flatten: design_descriptions
    unique: true
    without:
      - CHECK
      - EPINGL
      - JACQUARD
      - SOLI
      - STRI

  content_ops:
    api: items
    must:
      collection: textile
    flatten: content_arr
    unique: true

  use:
    api: items
    must:
      collection: textile
    flatten: use
    unique: true

  # no_content:
  #   api: items
  #   pluck: itemNumber
  #   field:
  #     _data:
  #       view: items
  #       filter:
  #         must:
  #           collection: textile
  #           name: '*'
  #           dropbox_img: true
  #         must_not:
  #           content: '*'
  #       pluck: itemNumber

view:

  price:
    output_id: items/price.json
    cdn: false

  pages: # These are the pages besides items.
    type: string
    field:
      date:
        app: map
        func: date_obj
      data: true
      pages: true
      # items: true
      showrooms: true
      textile_content_filters: content_ops
      color_ops_textile: color_ops_textile
      color_ops_passementerie: color_ops_passementerie
      color_ops_leather: color_ops_leather
      design_descriptions: design_descriptions
      design_descriptions_passementerie: design_descriptions_passementerie
      use: use
      theme:
        model: db
        _id: theme
    pager:
      iterate: pages # for each item in the list from the model pages
      field_id: page # field name for the item
      map:
        data: navigation
      template: # This field will be accessible using this field name in mustache.
        partial: # Add it to the view template as a partial.
          page_template: # If this template is an object the key is field name.
            model: template # Load same way as you load a template.
            _id: '{{^page.template}}{{page._filename}}{{/page.template}}{{page.template}}.html'
      file_id: '{{#page._dir2}}{{&page._dir2}}/{{/page._dir2}}{{&page._filename}}.html'
    template:
      model: template
      _id: default.html

  # Big huge thing used client side for database.
  client_data:
    output_id: items/client_data.json
    field:
      color_words: color_ops_textile
      colors: colors
      items:
        view: items
        filter:
          must:
            name: '*'
            dropbox_img: true
        omit: [dropbox_img, cdn_files, dropbox_id, _file, far, contents_arr, content_arr]
        rename:
          itemNumber: id
          primaryColor: primarycolor
          secondaryColor: secondarycolor
          approx_width: width
        emit:
          content: '{{content_arr}}'
          contents: '{{contents.0}}'
          design_descriptions: '{{design_descriptions}}'
          use: '{{use}}'
          img: 'http://img.rg.cape.io/{{_file.small.path}}{{^_file.small.path}}{{_file.large.path}}{{^_file.large.path}}items/{{itemNumber}}/1170.jpg{{/_file.large.path}}{{/_file.small.path}}'
      templates: mini_templates

  cdn_files:
    type: set
    field:
      _data:
        model: cdn
        limit: 5000
        filter:
          must_not:
            _dir2: ['rg', 'undefined']
        pluck: _basename
        group_by: _dir2
        group_by_field: cdn_files

  dropbox_files:
    type: set
    field:
      leather:
        model: photos_leather
        pluck:
          _file: _file
          dropbox_img: thumb_exists
          dropbox_id: _id
        index_by: itemNumber
      textile:
        model: photos_textiles
        limit: 5000
        pluck:
          _file: _file
          dropbox_img: thumb_exists
          dropbox_id: _id
          far: far
        index_by: itemNumber
      passem:
        model: photos_passementerie
        pluck:
          _file: _file
          dropbox_img: thumb_exists
          dropbox_id: _id
        index_by: itemNumber
    merge: true

  # files_no_file:
  #   type: list
  #   field:
  #     _data:
  #       view: dropbox_files
  #       pluck: dropbox_id
  #       filter:
  #         must_not:
  #           _file: '*'

  items:
    type: list
    field:
      cdn_files: cdn_files
      dropbox_files:
        view: dropbox_files
      items:
        model: items
        limit: 5000
        pluck: [
          name, color, primaryColor, secondaryColor,
          itemNumber, content, contents, repeat, collection,
          design_descriptions, use, sort, approx_width, far,
          design, contents_arr, content_arr]
        index_by: itemNumber
    merge:
      field_id: _data
      sort: sort

  items_no_dropbox:
    type: list
    output_id: items/no_dropbox.json
    field:
      _data:
        view: items
        pluck: [name, color, itemNumber, _file]
        filter:
          must:
            name: '*'
          must_not:
            dropbox_img: true

