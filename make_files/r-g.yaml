---
domain: r-g.cape.io # This is the cache CNAME used for the virtual server on the compile server. CNAME that domain to cache.cape.io and it will serve the compiled website.
cdn: img.rg.ookb.co
uid: kb # The CAPE user ID to use for authenticating against the providers when requesting API resources. This needs to be updated to the correct uid.
cape_version: 2.1.7 # Current version of cape can be found in Kai's head. Future at v2.cape.io/version

load:
  - "/_api/items/_load.json"
  - "/_api/gh_repo/_load.json"
  - "/_model/items/model_fields_add.json"
  - "/_model/files/model_fields_reload.json"
  - "/_model/template/model_fields_reload.json"
  - "/_model/pages/model_fields_reload.json"
  - "/_view/_all/_output"

api: # An API as a collection of content.
  cdn:
    provider: cloudfiles
    arg:
      container: img.rg.ookb.co
    load:
      resource: getFiles
      _id: path
      arg:
        marker: null

  photos:
    provider: dropbox
    load:
      resource: delta
      _id: path
      arg:
        cursor: ''
        root: sandbox
        path_prefix: /rg

  gh_repo: # Used to get content from the big heavy github repo.
    provider: github
    arg:
      owner: bjornmeansbear
      repo: rogers-and-goffigon
      branch: master
    load:
      resource: tree
      _id: path
      arg:
        recursive: true
        sha: master

  db: # Accept any post with make_id rg...
    provider: post
    arg:
      make_id: rg

  # An API defined for accepting posts.
  items: # Get item content from a json file.
    provider: order-track
    arg:
      id: rg
    load:
      provider: order-track
      resource: items
      _id: itemNumber
      arg:
        uid: 5
      field:
        _source: _self

model:
  db:
    filter:
      api: db
  cdn:
    filter:
      api: cdn

  template:
    filter:
      api: gh_repo
      must:
        _dirname: templates
    field:
      _self:
        api: gh_repo
        resource: raw_api
        type: yaml_front
        default: default.html
        arg:
          path: '{{&_id}}'

  mini_templates:
    type: set
    set_key: _filename
    filter:
      api: gh_repo
      must:
        _dirname: templates/mini
    field:
      _self:
        api: gh_repo
        resource: raw_api
        type: any
        arg:
          path: '{{&_id}}'

  files:
    type: files
    filter:
      api: gh_repo
      should:
        _ext: ['.jpg', '.jpeg', '.png', '.css', '.js', '.ico', '.gif', '.html', '.ttf']
      must_not:
        _dir1: reference
    file:
      source_file:
        api: gh_repo
        resource: raw_api
        file_id: '{{&_id}}'
        type: any
        arg:
          path: '{{&_id}}'

  photos_passementerie:
    filter:
      api: photos
      must:
        mime_type: "image/jpeg"
        _dir2: Passementrie
    field:
      itemNumber: '{{_filename}}'
    file:
      source_file:
        overwrite: false
        api: photos
        resource: files
        file_id: 'items/{{itemNumber}}/original.jpg'
        type: any
        cdn: true
        arg:
          root: sandbox
          path: "{{path}}"
        img_size:
          delete_source: true
          cdn: true
          sizes:
            -
              destination: 'items/{{itemNumber}}/1170.jpg'
              width: '1170'
              height: null
              name: large
              save_size: true

  photos_leather:
    filter:
      api: photos
      must:
        mime_type: "image/jpeg"
        _dir2: leather
    field:
      itemNumber:
        app: map
        func: string_replace
        arg:
          string: '{{path}}'
          regex: '.*[\_]([^_]*[-][^_]*)[\_].*'
          replace: '$1'
      distance: '{{_dir2}}'
    file:
      source_file:
        overwrite: false
        api: photos
        resource: files
        file_id: 'items/{{itemNumber}}/original.jpg'
        type: any
        cdn: true
        arg:
          root: sandbox
          path: "{{path}}"
        img_size:
          delete_source: true
          cdn: true
          sizes:
            -
              destination: 'items/{{itemNumber}}/640.jpg'
              width: '640'
              height: null
              name: small
            -
              destination: 'items/{{itemNumber}}/1536.jpg'
              width: '1536'
              height: null
              name: large

  photos_textiles:
    filter:
      api: photos
      must:
        mime_type: "image/jpeg"
      should:
        _dir2: [normal, far]
    field:
      itemNumber:
        app: map
        func: string_replace
        arg:
          string: '{{path}}'
          regex: '.*[\_]([^_]*[-][^_]*)[\_].*'
          replace: '$1'
      distance: '{{_dir2}}'
      far:
        app: map
        func: compare
        arg:
          this: '{{_dir2}}'
          that: far
    file:
      source_file:
        overwrite: false
        api: photos
        resource: files
        file_id: 'items/{{itemNumber}}/original.jpg'
        type: any
        cdn: true
        arg:
          root: sandbox
          path: "{{path}}"
        img_size:
          delete_source: true
          cdn: true
          sizes:
            -
              destination: 'items/{{itemNumber}}/{{#far}}far/{{/far}}640.jpg'
              width: '640'
              height: null
              name: small
            -
              destination: 'items/{{itemNumber}}/{{#far}}far/{{/far}}1536.jpg'
              width: '1536'
              height: null
              name: large

  data:
    type: object
    filter:
      api: gh_repo
      must:
        _id: content/data.yaml
    field: # The base "entity" in CAPE is the _id field. That's it.
      # To get the contents of the file we need to add a "meta-field"
      _self: # _self is a special meta-field that will place its own fields within the base context.
        file_id: 'data.json' # When the _file field has a value it saves that field as a file.
        api: gh_repo # The _self field is processed first.
        resource: raw_api # This just defines what API at github to use.
        type: yaml # This tells CAPE what to do with the file that it gets. This should default to the file extension.
        arg:
          path: '{{&_id}}' # The raw github API call requires a path param.

  showrooms:
    type: object
    filter:
      api: gh_repo
      must:
        _id: content/contact/showrooms.yaml
    field:
      _self:
        file_id: 'contact/showrooms.json'
        api: gh_repo
        resource: raw_api
        type: yaml
        arg:
          path: '{{&_id}}'

  beautyshots:
    type: object
    filter:
      api: gh_repo
      must:
        _id: beautyshots/index.yaml
    field: # The base "entity" in CAPE is the _id field. That's it.
      # To get the contents of the file we need to add a "meta-field"
      _self: # _self is a special meta-field that will place its own fields within the base context.
        file_id: 'beautyshots/index.json' # When the _file field has a value it saves that field as a file.
        api: gh_repo # The _self field is processed first.
        resource: raw_api # This just defines what API at github to use.
        type: yaml # This tells CAPE what to do with the file that it gets. This should default to the file extension.
        arg:
          path: '{{&_id}}' # The raw github API call requires a path param.

  pages:
    type: list
    filter:
      api: gh_repo
      must:
        _dir1: content
        _ext: .md
    field:
      _self:
        api: gh_repo
        resource: raw_api
        type: md
        arg:
          path: '{{&_id}}'

  items:
    limit: 3000
    type: list
    filter:
      api: items
      must_not:
        _id: TRIMBOOK
    field:
      color_id:
        app: map
        func: last_dash
        arg: '{{&_id}}'
      content_arr:
        app: map
        func: split
        arg:
          string: '{{&content}}'
          split_on: ', '
          split_on_sub: ' '
          compact: true
      contents_arr:
        app: rg
        func: parse_content
        arg:
          content: '{{&contents}}'
      colors:
        app: map
        func: split
        arg:
          string: '{{&primaryColor}}, {{&secondaryColor}}'
          split_on: ', '
          unique: true
          compact: true
      design_descriptions:
        app: map
        func: split
        arg:
          string: '{{&design}}'
          split_on: ', '
          split_on_sub: ' '
          unique: true
          compact: true
      use:
        app: map
        func: string_replace
        arg:
          string: '{{&miscellaneous}}'
          split_on: ','
          toUpperCase: true
          trim: true
          find_replace:
            A: Accessories
            D: Draperies
            U: Upholstery
            WC: Wall Covering
            SC: Slip Covers
            S: Sheer
      color:
        app: map
        func: second
        arg: descriptions
      name:
        app: map
        func: first
        arg: descriptions

    sort:
      field: sort

  textile:
    limit: 3000
    type: list
    filter:
      api: items
      must:
        _char1int: true
    field:
      collection: textile
      approx_width:
        app: map
        func: string_replace
        arg:
          string: '{{&width}}'
          regex: ' ?APP?R?R?OX\.? ?'
          toUpperCase: true
          trim: true
          replace: ''
    sort:
      field: sort

  passementerie:
    type: list
    filter:
      api: items
      must:
        _char1: P
    field:
      collection: passementerie
    sort:
      field: sort

  leather:
    type: list
    filter:
      api: items
      must:
        _char1: L
    field:
      collection: leather
    sort:
      field: sort

view:

  pages: # These are the pages besides items.
    type: string
    field:
      date:
        app: map
        func: date_obj
      data: true
      pages: true
      # items: true
      showrooms: true
      textile_content_filters: content_ops
      color_ops_textile: color_ops_textile
      color_ops_passementerie: color_ops_passementerie
      color_ops_leather: color_ops_leather
      design_descriptions: design_descriptions
      design_descriptions_passementerie: design_descriptions_passementerie
      use: use
      theme:
        model: db
        _id: theme
    pager:
      iterate: pages # for each item in the list from the model pages
      field_id: page # field name for the item
      map:
        data: navigation
      template: # This field will be accessible using this field name in mustache.
        partial: # Add it to the view template as a partial.
          page_template: # If this template is an object the key is field name.
            model: template # Load same way as you load a template.
            _id: '{{^page.template}}{{page._filename}}{{/page.template}}{{page.template}}.html'
      file_id: '{{#page._dir2}}{{&page._dir2}}/{{/page._dir2}}{{&page._filename}}.html'
    template:
      model: template
      _id: default.html

  # collection: # Saved to items/items.json
  #   type: list
  #   # output_id: items/collection.json
  #   field:
  #     items:
  #       view: items
  #       # filter:
  #       #   must:
  #       #     thumb_exists: true
  #   pager:
  #     iterate: items
  #     field_id: item
  #   emit:
  #     name: '{{&item.name}}'
  #     color: '{{&item.color}}'
  #     primarycolor: '{{item.primaryColor}}'
  #     secondarycolor: '{{item.secondaryColor}}'
  #     id: '{{item.itemNumber}}'
  #     content: '{{#item.contents_arr}}{{.}} {{/item.contents_arr}}'
  #     repeat: '{{&item.repeat}}'
  #     width: '{{&item.width}}'
  #     img: '{{&item._file.small.path}}'
  #     collection: '{{item.collection}}'
  #     design_descriptions: '{{#item.design_descriptions}}{{.}} {{/item.design_descriptions}}'
  #     use: '{{item.use}}'
  #     img_width: '{{item._file.large.width}}'
  #     img_height: '{{item._file.large.height}}'

  price:
    type: set
    output_id: items/price.json
    field:
      _data:
        model: items
        pluck: price
        index_by: _id

  mini_templates:
    type: set
    field:
      _data:
        model: mini_templates
        pluck: content

  colors:
    type: set
    field:
      _data:
        model: items
        group_by: patternNumber
        pluck: color_id

  content_ops:
    type: list
    # output_id: items/content_ops.json
    field:
      _data:
        model: textile
        pluck: contents_arr
        flatten: true
        unique: true
        compact: true
        sort: true
        remove: "%"

  color_ops_textile:
    type: list
    # output_id: items/color_ops_textile.json
    field:
      _data:
        model: textile
        pluck: colors
        flatten: true
        unique: true
        compact: true
        sort: true

  color_ops_passementerie:
    type: list
    # output_id: items/color_ops_passementerie.json
    field:
      _data:
        model: passementerie
        pluck: color
        flatten: true
        unique: true
        compact: true
        sort: true

  color_ops_leather:
    type: list
    # output_id: items/color_ops_leather.json
    field:
      _data:
        model: leather
        pluck: color
        flatten: true
        unique: true
        compact: true
        sort: true

  design_descriptions:
    type: list
    # output_id: items/design_descriptions.json
    field:
      _data:
        model: textile
        pluck: design_descriptions
        flatten: true
        unique: true
        compact: true
        sort: true

  design_descriptions_passementerie:
    type: list
    # output_id: items/design_descriptions.json
    field:
      _data:
        model: passementerie
        pluck: design_descriptions
        flatten: true
        unique: true
        compact: true
        sort: true

  use:
    type: list
    # output_id: items/use.json
    field:
      _data:
        model: textile
        pluck: use
        flatten: true
        unique: true
        compact: true
        sort: true

  # Big huge thing used client side for database.
  client_data:
    type: object
    output_id: items/client_data.json
    field:
      color_words: color_ops_textile
      colors: colors
      items:
        view: items
        filter:
          must:
            name: '*'
            dropbox_img: true
        omit: [dropbox_img, cdn_files, dropbox_id]
        rename:
          itemNumber: id
          primaryColor: primarycolor
          secondaryColor: secondarycolor
          approx_width: width
        emit:
          design_descriptions: '{{#design_descriptions}}{{.}} {{/design_descriptions}}'
          use: '{{#use}}{{.}} {{/use}}'
          img: 'http://img.rg.cape.io/items/{{itemNumber}}/640.jpg'
      templates: mini_templates

  cdn_files:
    type: set
    field:
      _data:
        model: cdn
        limit: 5000
        filter:
          must_not:
            _dir2: ['rg', 'undefined']
        pluck: _basename
        group_by: _dir2
        group_by_field: cdn_files

  dropbox_files:
    type: set
    field:
      leather:
        model: photos_leather
        pluck:
          _file: _file
          dropbox_img: thumb_exists
          dropbox_id: _id
        index_by: itemNumber
      textile:
        model: photos_textiles
        limit: 5000
        pluck:
          _file: _file
          dropbox_img: thumb_exists
          dropbox_id: _id
        index_by: itemNumber
      passem:
        model: photos_passementerie
        pluck:
          _file: _file
          dropbox_img: thumb_exists
          dropbox_id: _id
        index_by: itemNumber
    merge: true

  # files_no_file:
  #   type: list
  #   field:
  #     _data:
  #       view: dropbox_files
  #       pluck: dropbox_id
  #       filter:
  #         must_not:
  #           _file: '*'

  items:
    type: list
    field:
      cdn_files: cdn_files
      dropbox_files:
        view: dropbox_files
      items:
        model: items
        limit: 5000
        pluck: [name, color, primaryColor, secondaryColor, itemNumber, content, contents, repeat, collection, design_descriptions, use, sort, approx_width]
        index_by: itemNumber
    merge:
      field_id: _data
      sort: sort

  items_no_dropbox:
    type: list
    output_id: items/no_dropbox.json
    field:
      _data:
        view: items
        pluck: [name, color, itemNumber, _file]
        filter:
          must:
            name: '*'
          must_not:
            dropbox_img: true

  # items_no_cdn:
  #   type: list
  #   output_id: items/no_cdn.json
  #   field:
  #     _data:
  #       view: items
  #       pluck: dropbox_id
  #       filter:
  #         must:
  #           name: '*'
  #           dropbox_img: true
  #         must_not:
  #           cdn_files: '*'
  width:
    type: list
    field:
      _data:
        view: items
        pluck: itemNumber
        # unique: true
        group_by: approx_width

  # beautyshots:
  #   type: set
  #   field:
  #     _data:
  #       model: beautyshots
  #       map:
  #         app: rg
  #         func: beautyshots

