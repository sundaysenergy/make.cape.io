---
domain: rg.cape.io # This is the cache CNAME used for the virtual server on the compile server. CNAME that domain to cache.cape.io and it will serve the compiled website.
uid: 1 # The CAPE user ID to use for authenticating against the providers when requesting API resources. This needs to be updated to the correct uid.
cape_version: 2.0.7 # Current version of cape can be found in Kai's head. Future at v2.cape.io/version

load:
  - "http://v2.cape.io/rg/_api/items/_load.json"
  - "http://v2.cape.io/rg/_api/items/_update.json"
  - "http://v2.cape.io/rg/_api/gh_repo/_load.json"
  - "http://v2.cape.io/rg/_api/gh_repo/_update.json"
  - "http://v2.cape.io/rg/_model/items/model_fields_add.json"
  - "http://v2.cape.io/rg/_model/files/model_fields_reload.json"
  - "http://v2.cape.io/rg/_model/template/model_fields_reload.json"
  - "http://v2.cape.io/rg/_model/pages/model_fields_reload.json"
  - "http://v2.cape.io/rg/_view/_all/process.json"

api: # An API as a collection of content.

  old_demo: # Used to get content from old github repo.
    provider: github
    arg:
      owner: ookb
      repo: rogersgoffigon
      branch: gh-pages
    load: # To load previously created content from this API you need to specificy the load param.
      resource: tree # Github has a nice index of all content in a repo.
      _id: path
      arg:
        recursive: true # Thankfully they have an option to get results recursively.
        sha: gh-pages

  gh_repo: # Used to get content from the big heavy github repo.
    provider: github
    arg:
      owner: bjornmeansbear
      repo: rogers-and-goffigon
      branch: master
    load:
      resource: tree
      _id: path
      arg:
        recursive: true
        sha: master

  # An API defined for accepting posts.
  items: # Get item content from a json file.
    provider: post
    arg:
      id: rg
      source: pdf_csv
    load:
      provider: wget
      resource: json
      _id: itemnum
      arg:
        url: http://rg.cape.io/items/index_full.json
      field:
        _source: _self

model:
  template:
    filter:
      api: gh_repo
      must:
        _dirname: templates
    field:
      _self:
        api: gh_repo
        resource: raw_api
        type: yaml_front
        default: default.html
        arg:
          path: '{{&_id}}'

  files:
    type: files
    filter:
      api: gh_repo
      should:
        _ext: ['.jpg', '.jpeg', '.png', '.css', '.js', '.ico', '.gif', '.html', '.ttf']
      must_not:
        _dir1: reference
    file:
      source_file:
        api: gh_repo
        resource: raw_api
        file_id: '{{&_id}}'
        type: any
        arg:
          path: '{{&_id}}'

  pages:
    type: list
    filter:
      api: gh_repo
      must:
        _dir1: content
        _ext: .md
    field:
      _self:
        api: gh_repo
        resource: raw_api
        type: md
        arg:
          path: '{{&_id}}'

  items:
    type: list
    filter:
      api: items
    field:
      parent_id: '{{&_id}}'
      color: '{{&_id}}'
      contents: '{{&_self.content}}'
      _file_id: 'items/{{&_id}}/info.json'
    map:
      parent_id: last_dash_rm # remove everything and including the last dash
      color: last_dash # only return everything and excluding the last dash
      contents: split_percentval

  textile:
    type: list
    filter:
      api: items
      must:
        _char1int: true
    field:
      collection: textile
      img:
        provider: wget
        resource: json
        arg:
          url: 'http://v2.cape.io/rg/img?itemid={{&_id}}&far=1'

  passementerie:
    type: list
    filter:
      api: items
      must:
        _char1: P
    field:
      collection: passementerie
      img:
        provider: wget
        resource: json
        arg:
          url: 'http://v2.cape.io/rg/img?itemid={{&_id}}'

  leather:
    type: list
    filter:
      api: items
      must:
        _char1: L
    field:
      collection: leather
      img:
        provider: wget
        resource: json
        arg:
          url: 'http://v2.cape.io/rg/img?itemid={{&_id}}'

view:

  pages: # These are the pages besides items.
    type: string
    field:
      pages: true
      theme:
        provider: wget
        resource: json
        arg:
          url: http://db.cape.io/data/rg/theme

    pager:
      iterate: pages # for each item in the list from the model pages
      field_id: page # field name for the item
      template: # This field will be accessible using this field name in mustache.
        partial: # Add it to the view template as a partial.
          page_template: # If this template is an object the key is field name.
            model: template # Load same way as you load a template.
            _id: '{{^page.template}}{{page._filename}}{{/page.template}}{{page.template}}.html'
      file_id: '{{#page._dir2}}{{&page._dir2}}/{{/page._dir2}}{{&page._filename}}.html'
    template:
      model: template
      _id: default.html

  price_list: # Saved to trade/pricelist.json
    type: list
    output_id: trade/pricelist.json
    field:
      items: true
    pager:
      iterate: items
      field_id: item
    emit:
      name: '{{&item.descript_1}}'
      color: '{{&item.descript_2}}'
      id: '{{&item._id}}'
      content: '{{&item.content}}'
      repeat: '{{&item.repeat}}'
      width: '{{&item.width}}'
      price: '{{&item.price}}' # This price field should be removed when we go live.

  collection: # Saved to items/items.json
    type: list
    output_id: items/items.json
    field:
      items: true
    pager:
      iterate: items
      field_id: item
    emit:
      name: '{{&item.descript_1}}'
      color: '{{&item.descript_2}}'
      id: '{{&item._id}}'
      content: '{{&item.content}}'
      repeat: '{{&item.repeat}}'
      width: '{{&item.width}}'
      img: '{{&item.img.normal.640}}'
      collection: '{{item.collection}}'

  colors:
    type: set
    output_id: items/colors.json
    field:
      items: true
    pager:
      iterate: items
      field_id: item
      group_by: parent_id
    emit: '{{item.color}}'

  content_ops:
    type: list
    output_id: items/content_ops.json
    field:
      textile: true
    pager:
      iterate: textile
      set_field: contents

  color_ops:
    type: list
    output_id: items/color_ops.json
    field:
      textile: true
    pager:
      iterate: textile
      set_field: descript_2


